<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tic-Tac-Toe Game</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            background: linear-gradient(135deg, #1a2a6c, #b21f1f, #1a2a6c);
            padding: 20px;
        }

        .container {
            background-color: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
            width: 100%;
            max-width: 800px;
            padding: 30px;
            text-align: center;
        }

        header {
            margin-bottom: 25px;
        }

        h1 {
            color: #1a2a6c;
            font-size: 2.8rem;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
        }

        .subtitle {
            color: #b21f1f;
            font-size: 1.2rem;
            margin-bottom: 25px;
        }

        .game-container {
            display: flex;
            flex-direction: column;
            gap: 30px;
        }

        .game-controls {
            display: flex;
            justify-content: center;
            gap: 20px;
            flex-wrap: wrap;
        }

        .btn {
            background: linear-gradient(to right, #1a2a6c, #b21f1f);
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 50px;
            font-size: 1.1rem;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }

        .btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.25);
        }

        .btn:active {
            transform: translateY(0);
        }

        .btn.active {
            background: linear-gradient(to right, #b21f1f, #1a2a6c);
            box-shadow: 0 0 15px rgba(178, 31, 31, 0.5);
        }

        .game-info {
            background-color: #f8f9fa;
            border-radius: 15px;
            padding: 20px;
            box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.1);
        }

        .player-turn {
            font-size: 1.4rem;
            font-weight: bold;
            color: #1a2a6c;
            margin-bottom: 15px;
        }

        .player-turn span {
            color: #b21f1f;
            text-transform: uppercase;
        }

        .score-board {
            display: flex;
            justify-content: center;
            gap: 40px;
            margin-top: 15px;
        }

        .score {
            font-size: 1.2rem;
            color: #333;
        }

        .score span {
            font-weight: bold;
            color: #1a2a6c;
        }

        .game-board {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 15px;
            max-width: 400px;
            margin: 0 auto;
        }

        .cell {
            background: white;
            border-radius: 10px;
            height: 100px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 3.5rem;
            cursor: pointer;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
            aspect-ratio: 1/1;
        }

        .cell:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 15px rgba(0, 0, 0, 0.15);
            background-color: #f8f9fa;
        }

        .cell.x {
            color: #1a2a6c;
        }

        .cell.o {
            color: #b21f1f;
        }

        .winning-cell {
            animation: pulse 1.5s infinite;
            box-shadow: 0 0 20px rgba(178, 31, 31, 0.7);
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }

        .game-result {
            margin-top: 25px;
            font-size: 1.5rem;
            font-weight: bold;
            min-height: 40px;
            color: #1a2a6c;
        }

        .result-message.win {
            color: #28a745;
            font-size: 2rem;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.2);
        }

        .result-message.draw {
            color: #ffc107;
        }

        .ai-mode {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
            margin-top: 15px;
        }

        .switch {
            position: relative;
            display: inline-block;
            width: 60px;
            height: 34px;
        }

        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: .4s;
            border-radius: 34px;
        }

        .slider:before {
            position: absolute;
            content: "";
            height: 26px;
            width: 26px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }

        input:checked + .slider {
            background: linear-gradient(to right, #1a2a6c, #b21f1f);
        }

        input:checked + .slider:before {
            transform: translateX(26px);
        }

        footer {
            margin-top: 30px;
            color: #6c757d;
            font-size: 0.9rem;
        }

        .how-to-play {
            background-color: #f8f9fa;
            border-radius: 15px;
            padding: 20px;
            margin-top: 25px;
            text-align: left;
            box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.1);
        }

        .how-to-play h3 {
            color: #1a2a6c;
            margin-bottom: 15px;
            text-align: center;
        }

        .how-to-play ul {
            padding-left: 20px;
        }

        .how-to-play li {
            margin-bottom: 10px;
            line-height: 1.5;
        }

        @media (max-width: 600px) {
            .game-board {
                max-width: 300px;
            }
            
            .cell {
                height: 80px;
                font-size: 2.8rem;
            }
            
            .btn {
                padding: 10px 20px;
                font-size: 1rem;
            }
            
            h1 {
                font-size: 2.2rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1><i class="fas fa-times-circle"></i> Tic-Tac-Toe <i class="far fa-circle"></i></h1>
            <p class="subtitle">The classic game of X's and O's</p>
        </header>
        
        <div class="game-container">
            <div class="game-controls">
                <button class="btn active" id="twoPlayerBtn">Two Players</button>
                <button class="btn" id="vsAiBtn">Play vs AI</button>
                <button class="btn" id="resetBtn">Reset Game</button>
            </div>
            
            <div class="game-info">
                <div class="player-turn">Current Player: <span id="currentPlayer">X</span></div>
                <div class="score-board">
                    <div class="score">Player X: <span id="scoreX">0</span></div>
                    <div class="score">Player O: <span id="scoreO">0</span></div>
                    <div class="score">Draws: <span id="scoreDraw">0</span></div>
                </div>
                
                <div class="ai-mode">
                    <span>AI Mode:</span>
                    <label class="switch">
                        <input type="checkbox" id="aiToggle">
                        <span class="slider"></span>
                    </label>
                </div>
            </div>
            
            <div class="game-board" id="gameBoard">
                <div class="cell" data-index="0"></div>
                <div class="cell" data-index="1"></div>
                <div class="cell" data-index="2"></div>
                <div class="cell" data-index="3"></div>
                <div class="cell" data-index="4"></div>
                <div class="cell" data-index="5"></div>
                <div class="cell" data-index="6"></div>
                <div class="cell" data-index="7"></div>
                <div class="cell" data-index="8"></div>
            </div>
            
            <div class="game-result">
                <div id="resultMessage"></div>
            </div>
        </div>
        
        <div class="how-to-play">
            <h3>How to Play</h3>
            <ul>
                <li>Players take turns placing X's and O's on the 3x3 grid</li>
                <li>The first player to get 3 of their marks in a row (horizontally, vertically, or diagonally) wins</li>
                <li>If all 9 squares are filled without a winner, the game is a draw</li>
                <li>Toggle between two-player mode and playing against the AI using the buttons</li>
                <li>Reset the game at any time using the Reset button</li>
            </ul>
        </div>
        
        <footer>
            <p>Created with HTML, CSS, and JavaScript | Tic-Tac-Toe Game</p>
        </footer>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // Game state variables
            let gameBoard = ['', '', '', '', '', '', '', '', ''];
            let currentPlayer = 'X';
            let gameActive = true;
            let gameMode = 'twoPlayer'; // 'twoPlayer' or 'vsAI'
            let scores = { X: 0, O: 0, draw: 0 };
            
            // DOM elements
            const cells = document.querySelectorAll('.cell');
            const currentPlayerDisplay = document.getElementById('currentPlayer');
            const resultMessage = document.getElementById('resultMessage');
            const resetBtn = document.getElementById('resetBtn');
            const twoPlayerBtn = document.getElementById('twoPlayerBtn');
            const vsAiBtn = document.getElementById('vsAiBtn');
            const aiToggle = document.getElementById('aiToggle');
            const scoreX = document.getElementById('scoreX');
            const scoreO = document.getElementById('scoreO');
            const scoreDraw = document.getElementById('scoreDraw');
            
            // Winning combinations
            const winPatterns = [
                [0, 1, 2], [3, 4, 5], [6, 7, 8], // rows
                [0, 3, 6], [1, 4, 7], [2, 5, 8], // columns
                [0, 4, 8], [2, 4, 6]             // diagonals
            ];
            
            // Initialize game
            initGame();
            
            // Event listeners
            cells.forEach(cell => {
                cell.addEventListener('click', handleCellClick);
            });
            
            resetBtn.addEventListener('click', resetGame);
            twoPlayerBtn.addEventListener('click', () => setGameMode('twoPlayer'));
            vsAiBtn.addEventListener('click', () => setGameMode('vsAI'));
            aiToggle.addEventListener('change', toggleAIMode);
            
            function initGame() {
                resetGame();
                updateScores();
            }
            
            function handleCellClick(event) {
                const cell = event.target;
                const index = parseInt(cell.getAttribute('data-index'));
                
                // Check if cell is empty and game is active
                if (gameBoard[index] !== '' || !gameActive) return;
                
                // Make move for human player
                makeMove(index, currentPlayer);
                
                // Check for win or draw
                if (checkWin()) {
                    endGame(false);
                    return;
                }
                
                if (checkDraw()) {
                    endGame(true);
                    return;
                }
                
                // Switch player
                currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
                currentPlayerDisplay.textContent = currentPlayer;
                
                // If in vs AI mode and it's AI's turn
                if (gameMode === 'vsAI' && gameActive && currentPlayer === 'O') {
                    setTimeout(makeAIMove, 500);
                }
            }
            
            function makeMove(index, player) {
                // Update game board
                gameBoard[index] = player;
                
                // Update UI
                const cell = document.querySelector(`.cell[data-index="${index}"]`);
                cell.textContent = player;
                cell.classList.add(player.toLowerCase());
            }
            
            function makeAIMove() {
                if (!gameActive) return;
                
                // Simple AI: try to win, block opponent, or choose center/corners
                let move = -1;
                
                // Try to win
                move = findWinningMove('O');
                
                // Block opponent if no winning move
                if (move === -1) {
                    move = findWinningMove('X');
                }
                
                // Choose center if available
                if (move === -1 && gameBoard[4] === '') {
                    move = 4;
                }
                
                // Choose a random corner or side if no better move
                if (move === -1) {
                    const emptyCells = [];
                    gameBoard.forEach((cell, index) => {
                        if (cell === '') emptyCells.push(index);
                    });
                    
                    if (emptyCells.length > 0) {
                        move = emptyCells[Math.floor(Math.random() * emptyCells.length)];
                    }
                }
                
                // Make the AI move
                if (move !== -1) {
                    makeMove(move, 'O');
                    
                    // Check for win or draw
                    if (checkWin()) {
                        endGame(false);
                        return;
                    }
                    
                    if (checkDraw()) {
                        endGame(true);
                        return;
                    }
                    
                    // Switch back to human player
                    currentPlayer = 'X';
                    currentPlayerDisplay.textContent = currentPlayer;
                }
            }
            
            function findWinningMove(player) {
                for (const pattern of winPatterns) {
                    const [a, b, c] = pattern;
                    
                    // Check if two positions are filled by player and third is empty
                    if (gameBoard[a] === player && gameBoard[b] === player && gameBoard[c] === '') {
                        return c;
                    }
                    if (gameBoard[a] === player && gameBoard[c] === player && gameBoard[b] === '') {
                        return b;
                    }
                    if (gameBoard[b] === player && gameBoard[c] === player && gameBoard[a] === '') {
                        return a;
                    }
                }
                return -1;
            }
            
            function checkWin() {
                for (const pattern of winPatterns) {
                    const [a, b, c] = pattern;
                    if (gameBoard[a] !== '' && 
                        gameBoard[a] === gameBoard[b] && 
                        gameBoard[a] === gameBoard[c]) {
                        
                        // Highlight winning cells
                        document.querySelector(`.cell[data-index="${a}"]`).classList.add('winning-cell');
                        document.querySelector(`.cell[data-index="${b}"]`).classList.add('winning-cell');
                        document.querySelector(`.cell[data-index="${c}"]`).classList.add('winning-cell');
                        
                        return true;
                    }
                }
                return false;
            }
            
            function checkDraw() {
                return !gameBoard.includes('');
            }
            
            function endGame(isDraw) {
                gameActive = false;
                
                if (isDraw) {
                    resultMessage.textContent = "Game ended in a draw!";
                    resultMessage.className = 'result-message draw';
                    scores.draw++;
                    scoreDraw.textContent = scores.draw;
                } else {
                    resultMessage.innerHTML = `Player <span>${currentPlayer}</span> wins!`;
                    resultMessage.className = 'result-message win';
                    scores[currentPlayer]++;
                    
                    if (currentPlayer === 'X') {
                        scoreX.textContent = scores.X;
                    } else {
                        scoreO.textContent = scores.O;
                    }
                }
            }
            
            function resetGame() {
                gameBoard = ['', '', '', '', '', '', '', '', ''];
                currentPlayer = 'X';
                gameActive = true;
                
                // Reset UI
                cells.forEach(cell => {
                    cell.textContent = '';
                    cell.className = 'cell';
                });
                
                currentPlayerDisplay.textContent = currentPlayer;
                resultMessage.textContent = '';
                resultMessage.className = '';
            }
            
            function setGameMode(mode) {
                gameMode = mode;
                
                if (mode === 'twoPlayer') {
                    twoPlayerBtn.classList.add('active');
                    vsAiBtn.classList.remove('active');
                } else {
                    twoPlayerBtn.classList.remove('active');
                    vsAiBtn.classList.add('active');
                }
                
                resetGame();
            }
            
            function toggleAIMode() {
                setGameMode(aiToggle.checked ? 'vsAI' : 'twoPlayer');
            }
            
            function updateScores() {
                scoreX.textContent = scores.X;
                scoreO.textContent = scores.O;
                scoreDraw.textContent = scores.draw;
            }
        });
    </script>
</body>
</html>
